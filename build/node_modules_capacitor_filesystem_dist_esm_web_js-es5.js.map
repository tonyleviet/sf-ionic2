{"version":3,"mappings":"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","names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","constructor","arguments","DB_VERSION","DB_NAME","_writeCmds","initDb","_this","_db","undefined","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","dbRequest","cmd","args","readFlag","_this2","indexOf","then","conn","tx","transaction","store","objectStore","req","dbIndexRequest","indexName","_this3","getPath","directory","uriPath","cleanedUriPath","replace","fsPath","clear","_this4","readFile","options","_this5","entry","Error","data","content","writeFile","_this6","encoding","doRecursive","recursive","occupiedEntry","type","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","uri","appendFile","_this7","btoa","atob","deleteFile","_this8","IDBKeyRange","only","entries","_this9","depth","match","rmdir","fullPath","_this10","readdir","readDirResult","files","entryPath","name","stat","entryObj","_this11","all","map","e","subEntry","substring","getUri","_this12","_this13","rename","_this14","_copy","copy","_this15","requestPermissions","publicStorage","checkPermissions","doRename","toDirectory","to","from","fromDirectory","fromPath","_this16","toPath","toObj","toPathComponents","toParentDirectory","fromObj","updateTime","file","writeResult","contents","filename","str","err","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","createIndex","WebPlugin","_debug"],"sources":["webpack:///node_modules/@capacitor/filesystem/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        if (!encoding) {\n            data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n            if (!this.isBase64String(data))\n                throw Error('The supplied data is not valid base64 content.');\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (!encoding && !this.isBase64String(data))\n            throw Error('The supplied data is not valid base64 content.');\n        if (occupiedEntry !== undefined) {\n            if (occupiedEntry.content !== undefined && !encoding) {\n                data = btoa(atob(occupiedEntry.content) + atob(data));\n            }\n            else {\n                data = occupiedEntry.content + data;\n            }\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry.name}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const files = await Promise.all(entries.map(async (e) => {\n            let subEntry = (await this.dbRequest('get', [e]));\n            if (subEntry === undefined) {\n                subEntry = (await this.dbRequest('get', [e + '/']));\n            }\n            return {\n                name: e.substring(path.length + 1),\n                type: subEntry.type,\n                size: subEntry.size,\n                ctime: subEntry.ctime,\n                mtime: subEntry.mtime,\n                uri: subEntry.path,\n            };\n        }));\n        return { files: files };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        await this._copy(options, true);\n        return;\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return {\n                uri: toPath,\n            };\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                // Write the file to the new location\n                const writeResult = await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return writeResult;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename}`,\n                        to: `${to}/${filename}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n        return {\n            uri: toPath,\n        };\n    }\n    isBase64String(str) {\n        try {\n            return btoa(atob(str)) == str;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n}\nFilesystemWeb._debug = true;\n"]}